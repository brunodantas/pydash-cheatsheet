{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"en/","title":"pydash-cheatsheet","text":"<p>A simplified reference for pydash.</p>"},{"location":"en/#get","title":"get","text":"<p>Easy access to properties at any level</p> ExampleDocstring <pre><code>&gt;&gt;&gt; get({'a': {'b': 1}, 'c': 2}, 'a.b')\n1\n</code></pre> <pre><code>Get the value at any depth of a nested object based on the path described by `path`. If path\ndoesn't exist, `default` is returned.\n\nArgs:\n    obj: Object to process.\n    path: List or ``.`` delimited string of path describing path.\n    default: Default value to return if path doesn't exist. Defaults to ``None``.\n\nReturns:\n    Value of `obj` at path.\n\nExample:\n\n    &gt;&gt;&gt; get({}, 'a.b.c') is None\n    True\n    &gt;&gt;&gt; get({'a': {'b': {'c': [1, 2, 3, 4]}}}, 'a.b.c[1]')\n    2\n    &gt;&gt;&gt; get({'a': {'b': {'c': [1, 2, 3, 4]}}}, 'a.b.c.1')\n    2\n    &gt;&gt;&gt; get({'a': {'b': [0, {'c': [1, 2]}]}}, 'a.b.1.c.1')\n    2\n    &gt;&gt;&gt; get({'a': {'b': [0, {'c': [1, 2]}]}}, ['a', 'b', 1, 'c', 1])\n    2\n    &gt;&gt;&gt; get({'a': {'b': [0, {'c': [1, 2]}]}}, 'a.b.1.c.2') is None\n    True\n\n.. versionadded:: 2.0.0\n\n.. versionchanged:: 2.2.0\n    Support escaping \".\" delimiter in single string path key.\n\n.. versionchanged:: 3.3.0\n\n    - Added :func:`get` as main definition and :func:`get_path` as alias.\n    - Made :func:`deep_get` an alias.\n\n.. versionchanged:: 3.4.7\n    Fixed bug where an iterable default was iterated over instead of being returned when an\n    object path wasn't found.\n\n.. versionchanged:: 4.0.0\n\n    - Support attribute access on `obj` if item access fails.\n    - Removed aliases ``get_path`` and ``deep_get``.\n\n.. versionchanged:: 4.7.6\n    Fixed bug where getattr is used on Mappings and Sequence in Python 3.5+\n</code></pre>"},{"location":"en/#set_","title":"set_","text":"<p>Set property at any level</p> <p>Variants: set_with</p> ExampleDocstring <pre><code>&gt;&gt;&gt; set_({'a': 2}, 'b.c', 3)\n{'a': 2, 'b': {'c': 3}}\n</code></pre> <pre><code>Sets the value of an object described by `path`. If any part of the object path doesn't exist,\nit will be created.\n\nArgs:\n    obj: Object to modify.\n    path: Target path to set value to.\n    value: Value to set.\n\nReturns:\n    Modified `obj`.\n\nWarning:\n    `obj` is modified in place.\n\nExample:\n\n    &gt;&gt;&gt; set_({}, 'a.b.c', 1)\n    {'a': {'b': {'c': 1}}}\n    &gt;&gt;&gt; set_({}, 'a.0.c', 1)\n    {'a': {'0': {'c': 1}}}\n    &gt;&gt;&gt; set_([1, 2], '[2][0]', 1)\n    [1, 2, [1]]\n    &gt;&gt;&gt; set_({}, 'a.b[0].c', 1)\n    {'a': {'b': [{'c': 1}]}}\n\n.. versionadded:: 2.2.0\n\n.. versionchanged:: 3.3.0\n    Added :func:`set_` as main definition and :func:`deep_set` as alias.\n\n.. versionchanged:: 4.0.0\n\n    - Modify `obj` in place.\n    - Support creating default path values as ``list`` or ``dict`` based on whether key or index\n      substrings are used.\n    - Remove alias ``deep_set``.\n</code></pre>"},{"location":"en/#has","title":"has","text":"<p>Check if property exists at any level</p> ExampleDocstring <pre><code>&gt;&gt;&gt; has({'a': {'b': 1}, 'c': 2}, 'a.d')\nFalse\n</code></pre> <pre><code>Checks if `path` exists as a key of `obj`.\n\nArgs:\n    obj: Object to test.\n    path: Path to test for. Can be a list of nested keys or a ``.`` delimited string of\n        path describing the path.\n\nReturns:\n    Whether `obj` has `path`.\n\nExample:\n\n    &gt;&gt;&gt; has([1, 2, 3], 1)\n    True\n    &gt;&gt;&gt; has({'a': 1, 'b': 2}, 'b')\n    True\n    &gt;&gt;&gt; has({'a': 1, 'b': 2}, 'c')\n    False\n    &gt;&gt;&gt; has({'a': {'b': [0, {'c': [1, 2]}]}}, 'a.b.1.c.1')\n    True\n    &gt;&gt;&gt; has({'a': {'b': [0, {'c': [1, 2]}]}}, 'a.b.1.c.2')\n    False\n\n.. versionadded:: 1.0.0\n\n.. versionchanged:: 3.0.0\n    Return ``False`` on ``ValueError`` when checking path.\n\n.. versionchanged:: 3.3.0\n\n    - Added :func:`deep_has` as alias.\n    - Added :func:`has_path` as alias.\n\n.. versionchanged:: 4.0.0\n    Removed aliases ``deep_has`` and ``has_path``.\n</code></pre>"},{"location":"en/#find","title":"find","text":"<p>Find first element that passes a criterion function</p> <p>Variants: find_index, find_last, find_last_index</p> ExampleDocstring <pre><code>&gt;&gt;&gt; find([1, 2, 3, 4], lambda n: n &gt; 2)\n3\n</code></pre> <pre><code>Iterates over elements of a collection, returning the first element that the predicate returns\ntruthy for.\n\nArgs:\n    collection: Collection to iterate over.\n    predicate: Predicate applied per iteration.\n\nReturns:\n    First element found or ``None``.\n\nExample:\n\n    &gt;&gt;&gt; find([1, 2, 3, 4], lambda x: x &gt;= 3)\n    3\n    &gt;&gt;&gt; find([{'a': 1}, {'b': 2}, {'a': 1, 'b': 2}], {'a': 1})\n    {'a': 1}\n\n.. versionadded:: 1.0.0\n\n.. versionchanged:: 4.0.0\n    Removed aliases ``detect`` and ``find_where``.\n</code></pre>"},{"location":"en/#index_of","title":"index_of","text":"<p>Find the index of an element</p> <p>Variants: last_index_of</p> ExampleDocstring <pre><code>&gt;&gt;&gt; index_of([1, 2, 3, 2], 2)\n1\n</code></pre> <pre><code>Gets the index at which the first occurrence of value is found.\n\nArgs:\n    array: List to search.\n    value: Value to search for.\n    from_index: Index to search from.\n\nReturns:\n    Index of found item or ``-1`` if not found.\n\nExample:\n\n    &gt;&gt;&gt; index_of([1, 2, 3, 4], 2)\n    1\n    &gt;&gt;&gt; index_of([2, 1, 2, 3], 2, from_index=1)\n    2\n\n.. versionadded:: 1.0.0\n</code></pre>"},{"location":"en/#pluck","title":"pluck","text":"<p>Retrieve property values from collections</p> ExampleDocstring <pre><code>&gt;&gt;&gt; pluck([{'a': 1}, {'a': 2, 'b': 3}, {'a': 4}, {}], 'a')\n[1, 2, 4, None]\n</code></pre> <pre><code>Retrieves the value of a specified property from all elements in the collection.\n\nArgs:\n    collection: List of dicts.\n    path: Collection's path to pluck\n\nReturns:\n    Plucked list.\n\nExample:\n\n    &gt;&gt;&gt; pluck([{'a': 1, 'b': 2}, {'a': 3, 'b': 4}, {'a': 5, 'b': 6}], 'a')\n    [1, 3, 5]\n    &gt;&gt;&gt; pluck([[[0, 1]], [[2, 3]], [[4, 5]]], '0.1')\n    [1, 3, 5]\n    &gt;&gt;&gt; pluck([{'a': {'b': 1}}, {'a': {'b': 2}}], 'a.b')\n    [1, 2]\n    &gt;&gt;&gt; pluck([{'a': {'b': [0, 1]}}, {'a': {'b': [2, 3]}}], 'a.b.1')\n    [1, 3]\n    &gt;&gt;&gt; pluck([{'a': {'b': [0, 1]}}, {'a': {'b': [2, 3]}}], ['a', 'b', 1])\n    [1, 3]\n\n.. versionadded:: 1.0.0\n\n.. versionchanged:: 4.0.0\n    Function removed.\n\n.. versionchanged:: 4.0.1\n    Made property access deep.\n</code></pre>"},{"location":"en/#pull","title":"pull","text":"<p>Removes specific elements from array</p> <p>Variants: pull_all_by, pull_all_with, pull_at, remove, take, without</p> ExampleDocstring <pre><code>&gt;&gt;&gt; pull([1, 2, 3, 4, 3, 2], 2, 3)\n[1, 4]\n</code></pre> <pre><code>Removes all provided values from the given array.\n\nArgs:\n    array: List to pull from.\n    values: Values to remove.\n\nReturns:\n    Modified `array`.\n\nWarning:\n    `array` is modified in place.\n\nExample:\n\n    &gt;&gt;&gt; pull([1, 2, 2, 3, 3, 4], 2, 3)\n    [1, 4]\n\n.. versionadded:: 1.0.0\n\n.. versionchanged:: 4.0.0\n    :func:`pull` method now calls :func:`pull_all` method for the desired\n    functionality.\n</code></pre>"},{"location":"en/#rename_keys","title":"rename_keys","text":"<p>New dict with renamed keys</p> ExampleDocstring <pre><code>&gt;&gt;&gt; rename_keys({'a': 1, 'b': 2}, {'a': 'A', 'b': 'B'})\n{'A': 1, 'B': 2}\n</code></pre> <pre><code>Rename the keys of `obj` using `key_map` and return new object.\n\nArgs:\n    obj: Object to rename.\n    key_map: Renaming map whose keys correspond to existing keys in `obj` and whose\n        values are the new key name.\n\nReturns:\n    Renamed `obj`.\n\nExample:\n\n    &gt;&gt;&gt; obj = rename_keys({'a': 1, 'b': 2, 'c': 3}, {'a': 'A', 'b': 'B'})\n    &gt;&gt;&gt; obj == {'A': 1, 'B': 2, 'c': 3}\n    True\n\n.. versionadded:: 2.0.0\n</code></pre>"},{"location":"en/#flatten","title":"flatten","text":"<p>Flatten an array by one level</p> <p>Variants: flatten_deep, flatten_depth</p> ExampleDocstring <pre><code>&gt;&gt;&gt; flatten([1, [2, [3, [4]], 5]])\n[1, 2, [3, [4]], 5]\n</code></pre> <pre><code>Flattens array a single level deep.\n\nArgs:\n    array: List to flatten.\n\nReturns:\n    Flattened list.\n\nExample:\n\n    &gt;&gt;&gt; flatten([[1], [2, [3]], [[4]]])\n    [1, 2, [3], [4]]\n\n\n.. versionadded:: 1.0.0\n\n.. versionchanged:: 2.0.0\n    Removed `callback` option. Added ``is_deep`` option. Made it shallow\n    by default.\n\n.. versionchanged:: 4.0.0\n    Removed ``is_deep`` option. Use :func:`flatten_deep` instead.\n</code></pre>"},{"location":"en/#count_by","title":"count_by","text":"<p>Count occurences of values in sequence</p> ExampleDocstring <pre><code>&gt;&gt;&gt; count_by('mississipi')\n{'m': 1, 'i': 4, 's': 4, 'p': 1}\n</code></pre> <pre><code>Creates an object composed of keys generated from the results of running each element of\n`collection` through the iteratee.\n\nArgs:\n    collection: Collection to iterate over.\n    iteratee: Iteratee applied per iteration.\n\nReturns:\n    Dict containing counts by key.\n\nExample:\n\n    &gt;&gt;&gt; results = count_by([1, 2, 1, 2, 3, 4])\n    &gt;&gt;&gt; assert results == {1: 2, 2: 2, 3: 1, 4: 1}\n    &gt;&gt;&gt; results = count_by(['a', 'A', 'B', 'b'], lambda x: x.lower())\n    &gt;&gt;&gt; assert results == {'a': 2, 'b': 2}\n    &gt;&gt;&gt; results = count_by({'a': 1, 'b': 1, 'c': 3, 'd': 3})\n    &gt;&gt;&gt; assert results == {1: 2, 3: 2}\n\n.. versionadded:: 1.0.0\n</code></pre>"},{"location":"en/#camel_case","title":"camel_case","text":"<p>Text to camel case</p> <p>Variants: kebab_case, human_case, snake_case, slugify etc</p> ExampleDocstring <pre><code>&gt;&gt;&gt; camel_case('Foo Bar')\nfooBar\n</code></pre> <pre><code>Converts `text` to camel case.\n\nArgs:\n    text: String to convert.\n\nReturns:\n    String converted to camel case.\n\nExample:\n\n    &gt;&gt;&gt; camel_case('FOO BAR_bAz')\n    'fooBarBAz'\n\n.. versionadded:: 1.1.0\n\n.. versionchanged:: 5.0.0\n    Improved unicode word support.\n</code></pre>"},{"location":"en/#sample_size","title":"sample_size","text":"<p>Retrieve random sample of elements</p> ExampleDocstring <pre><code>&gt;&gt;&gt; sample_size([1, 2, 3, 4], 2)\n[1, 4]\n</code></pre> <pre><code>Retrieves list of `n` random elements from a collection.\n\nArgs:\n    collection: Collection to iterate over.\n    n: Number of random samples to return.\n\nReturns:\n    List of `n` sampled collection values.\n\nExamples:\n\n    &gt;&gt;&gt; items = [1, 2, 3, 4, 5]\n    &gt;&gt;&gt; results = sample_size(items, 2)\n    &gt;&gt;&gt; assert len(results) == 2\n    &gt;&gt;&gt; assert set(items).intersection(results) == set(results)\n\n.. versionadded:: 4.0.0\n</code></pre>"},{"location":"en/#chunk","title":"chunk","text":"<p>Separate elements into chunks</p> ExampleDocstring <pre><code>&gt;&gt;&gt; chunk([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n</code></pre> <pre><code>Creates a list of elements split into groups the length of `size`. If `array` can't be split\nevenly, the final chunk will be the remaining elements.\n\nArgs:\n    array: List to chunk.\n    size: Chunk size. Defaults to ``1``.\n\nReturns:\n    New list containing chunks of `array`.\n\nExample:\n\n    &gt;&gt;&gt; chunk([1, 2, 3, 4, 5], 2)\n    [[1, 2], [3, 4], [5]]\n\n.. versionadded:: 1.1.0\n</code></pre>"},{"location":"en/#compact","title":"compact","text":"<p>Take falsey values out</p> ExampleDocstring <pre><code>&gt;&gt;&gt; compact([0, 1, False, 2, '', 3])\n[1, 2, 3]\n</code></pre> <pre><code>Creates a list with all falsey values of array removed.\n\nArgs:\n    array: List to compact.\n\nReturns:\n    Compacted list.\n\nExample:\n\n    &gt;&gt;&gt; compact(['', 1, 0, True, False, None])\n    [1, True]\n\n.. versionadded:: 1.0.0\n</code></pre>"},{"location":"en/#difference","title":"difference","text":"<p>Return elements that are in the first array but not in the others</p> <p>Variants: difference_by, difference_with</p> ExampleDocstring <pre><code>&gt;&gt;&gt; difference([1, 2], [2, 3], [4, 5])\n[1]\n</code></pre> <pre><code>Creates a list of list elements not present in others.\n\nArgs:\n    array: List to process.\n    others: Lists to check.\n\nReturns:\n    Difference between `others`.\n\nExample:\n\n    &gt;&gt;&gt; difference([1, 2, 3], [1], [2])\n    [3]\n\n.. versionadded:: 1.0.0\n</code></pre>"},{"location":"en/#take_while","title":"take_while","text":"<p>Conditional slice</p> <p>Variants: drop_right_while, drop_while, drop_right_while</p> ExampleDocstring <pre><code>&gt;&gt;&gt; take_while([1, 2, 3, 4], lambda n: n &lt; 3)\n[1, 2]\n</code></pre> <pre><code>Creates a slice of `array` with elements taken from the beginning. Elements are taken until the\n`predicate` returns falsey. The `predicate` is invoked with three arguments: ``(value, index,\narray)``.\n\nArgs:\n    array: List to process.\n    predicate: Predicate called per iteration\n\nReturns:\n    Taken list.\n\nExample:\n\n    &gt;&gt;&gt; take_while([1, 2, 3, 4], lambda x: x &lt; 3)\n    [1, 2]\n\n.. versionadded:: 1.1.0\n</code></pre>"},{"location":"en/#duplicates","title":"duplicates","text":"<p>Returns duplicate values</p> ExampleDocstring <pre><code>&gt;&gt;&gt; duplicates([1, 2, 3, 4, 2, 3])\n[2, 3]\n</code></pre> <pre><code>Creates a unique list of duplicate values from `array`. If iteratee is passed, each element of\narray is passed through an iteratee before duplicates are computed. The iteratee is invoked with\nthree arguments: ``(value, index, array)``. If an object path is passed for iteratee, the\ncreated iteratee will return the path value of the given element. If an object is passed for\niteratee, the created filter style iteratee will return ``True`` for elements that have the\nproperties of the given object, else ``False``.\n\nArgs:\n    array: List to process.\n    iteratee: Iteratee applied per iteration.\n\nReturns:\n    List of duplicates.\n\nExample:\n\n    &gt;&gt;&gt; duplicates([0, 1, 3, 2, 3, 1])\n    [3, 1]\n\n.. versionadded:: 3.0.0\n</code></pre>"},{"location":"en/#attempt","title":"attempt","text":"<p>Return function result or caught exception</p> ExampleDocstring <pre><code>&gt;&gt;&gt; attempt(lambda: 1 / 0)\ndivision by zero\n</code></pre> <pre><code>Attempts to execute `func`, returning either the result or the caught error object.\n\nArgs:\n    func: The function to attempt.\n\nReturns:\n    Returns the `func` result or error object.\n\nExample:\n\n    &gt;&gt;&gt; results = attempt(lambda x: x/0, 1)\n    &gt;&gt;&gt; assert isinstance(results, ZeroDivisionError)\n\n.. versionadded:: 1.1.0\n</code></pre>"},{"location":"en/#memoize","title":"memoize","text":"<p>Cache function results</p> ExampleDocstring <pre><code>&gt;&gt;&gt; memoize(sum).cache\n{}\n</code></pre> <pre><code>Creates a function that memoizes the result of `func`. If `resolver` is provided it will be used\nto determine the cache key for storing the result based on the arguments provided to the\nmemoized function. By default, all arguments provided to the memoized function are used as the\ncache key. The result cache is exposed as the cache property on the memoized function.\n\nArgs:\n    func: Function to memoize.\n    resolver: Function that returns the cache key to use.\n\nReturns:\n    Memoized function.\n\nExample:\n\n    &gt;&gt;&gt; ident = memoize(identity)\n    &gt;&gt;&gt; ident(1)\n    1\n    &gt;&gt;&gt; ident.cache['(1,){}'] == 1\n    True\n    &gt;&gt;&gt; ident(1, 2, 3)\n    1\n    &gt;&gt;&gt; ident.cache['(1, 2, 3){}'] == 1\n    True\n\n.. versionadded:: 1.0.0\n</code></pre>"},{"location":"en/#debounce","title":"debounce","text":"<p>Delay execution of a function</p> <p>Variants: delay</p> ExampleDocstring <pre><code>&gt;&gt;&gt; debounce(lambda: print('Hello'), 1000)()\nNone\n</code></pre> <pre><code>Creates a function that will delay the execution of `func` until after `wait` milliseconds have\nelapsed since the last time it was invoked. Subsequent calls to the debounced function will\nreturn the result of the last `func` call.\n\nArgs:\n    func: Function to execute.\n    wait: Milliseconds to wait before executing `func`.\n    max_wait (optional): Maximum time to wait before executing `func`.\n\nReturns:\n    Function wrapped in a :class:`Debounce` context.\n\n.. versionadded:: 1.0.0\n</code></pre>"},{"location":"en/#curry","title":"curry","text":"<p>Partial application of functions</p> ExampleDocstring <pre><code>&gt;&gt;&gt; curry(lambda a, b, c: a + b + c)(1)(2)(3)\n6\n</code></pre> <pre><code>Creates a function that accepts one or more arguments of `func` that when invoked either\nexecutes `func` returning its result (if all `func` arguments have been provided) or returns a\nfunction that accepts one or more of the remaining `func` arguments, and so on.\n\nArgs:\n    func: Function to curry.\n    arity: Number of function arguments that can be accepted by curried\n        function. Default is to use the number of arguments that are accepted by `func`.\n\nReturns:\n    Function wrapped in a :class:`Curry` context.\n\nExample:\n\n    &gt;&gt;&gt; func = lambda a, b, c: (a, b, c)\n    &gt;&gt;&gt; currier = curry(func)\n    &gt;&gt;&gt; currier = currier(1)\n    &gt;&gt;&gt; assert isinstance(currier, Curry)\n    &gt;&gt;&gt; currier = currier(2)\n    &gt;&gt;&gt; assert isinstance(currier, Curry)\n    &gt;&gt;&gt; currier = currier(3)\n    &gt;&gt;&gt; currier\n    (1, 2, 3)\n\n.. versionadded:: 1.0.0\n</code></pre>"},{"location":"en/#xor","title":"xor","text":"<p>Exclusive or of sequences</p> <p>Variants: xor_by, xor_with</p> ExampleDocstring <pre><code>&gt;&gt;&gt; xor([1, 2], [2, 3], [3, 4])\n[1, 4]\n</code></pre> <pre><code>Creates a list that is the symmetric difference of the provided lists.\n\nArgs:\n    array: List to process.\n    *lists: Lists to xor with.\n\nReturns:\n    XOR'd list.\n\nExample:\n\n    &gt;&gt;&gt; xor([1, 3, 4], [1, 2, 4], [2])\n    [3]\n\n.. versionadded:: 1.0.0\n</code></pre>"},{"location":"en/about/","title":"about","text":"<p>This page is meant to be a starting point and quick reference for pydash, containing some of its most widely useful functions that aren't easily covered by modern Python. I also used this page as a project to get more familiarized with pydash and generating documentation programatically with Material for MkDocs. Any suggestions are welcome at the repo.</p>"}]}